{"version":3,"sources":["components/ClickCard.js","App.js","serviceWorker.js","index.js"],"names":["ClickCard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleMouseClick","parentClickHandler","assertThisInitialized","state","visible","styleName","className","name","obj","setState","console","log","react_default","a","createElement","class","onClick","style","visibility","Component","Names","previousInstance","App","shuffleArray","array","i","length","j","Math","floor","random","_ref","resetMe","count","shuffledArray","setTimeout","clickHandler","cnt","updateStatus","_this2","map","index","ClickCard_ClickCard","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2e45aa12.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass ClickCard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n     this.state = {\r\n       visible: props.visible,\r\n       styleName: props.className || \"app\"\r\n    }\r\n    this.name = props.name;\r\n    this.parentClickHandler = props.parentClickHandler;\r\n  }\r\n  handleMouseClick = () => {\r\n    this.parentClickHandler(this);\r\n  }\r\n  updateStatus (obj) {\r\n    this.setState(obj);\r\n  }\r\n  render() {\r\n    console.log('clickcard render');\r\n    return (\r\n      <div class={ this.state.styleName } onClick= {this.handleMouseClick} name= { this.name }>\r\n        <h1 style={{\"visibility\": this.state.visible}}> { this.name } </h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport { ClickCard };\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport { ClickCard } from './components/ClickCard.js';\n\nconst Names = [{name: \"Jim\", visible: \"hidden\"},\n  {name: \"Jack\", visible: \"hidden\"},\n  {name: \"Joe\", visible: \"hidden\"},\n  {name: \"Tim\", visible: \"hidden\"},\n  {name: \"Tack\", visible: \"hidden\"},\n  {name: \"Toe\", visible: \"hidden\"},\n  {name: \"Zim\", visible: \"hidden\"},\n  {name: \"Hack\", visible: \"hidden\"},\n  {name: \"Jim\", visible: \"hidden\"},\n  {name: \"Jack\", visible: \"hidden\"},\n  {name: \"Joe\", visible: \"hidden\"},\n  {name: \"Tim\", visible: \"hidden\"},\n  {name: \"Tack\", visible: \"hidden\"},\n  {name: \"Toe\", visible: \"hidden\"},\n  {name: \"Zim\", visible: \"hidden\"},\n  {name: \"Gur\", visible: \"hidden\"},\n  {name: \"Dur\", visible: \"hidden\"},\n  {name: \"Gur\", visible: \"hidden\"},\n  {name: \"Dur\", visible: \"hidden\"},\n  {name: \"Hack\", visible: \"hidden\"}];\n\n  let previousInstance = null;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0,\n      shuffledArray: this.shuffleArray(Names)\n    }\n  }\n  shuffleArray = (array) => {\n      for (let i = array.length - 1; i > 0; i--) {\n          const j = Math.floor(Math.random() * (i + 1));\n          [array[i], array[j]] = [array[j], array[i]];\n      }\n    return array;\n  }\n  resetMe = () => {\n    this.setState({\n      count: 0,\n      shuffledArray: []\n    });\n    setTimeout(() => {\n      this.setState({\n        count: 0,\n        shuffledArray: this.shuffleArray(Names)\n      });\n    },1);\n\n  }\n  clickHandler = (obj) => {\n    console.log(\"The parent is called from the ClickCard\");\n    if(!previousInstance){\n      previousInstance = obj;\n      obj.updateStatus({visible: \"visible\", styleName: \"miniCard spin\"});\n    } else if (previousInstance) {\n      let cnt = this.state.count;\n      this.setState({count: ++cnt });\n      if (previousInstance.name !== obj.name) {\n        obj.updateStatus({visible: \"visible\", styleName: \"miniCard spin\"});\n        setTimeout(() => {\n          obj.updateStatus({visible: \"hidden\", styleName: \"miniCard\"});\n          previousInstance.updateStatus({visible: \"hidden\", styleName: \"miniCard\"})\n          previousInstance = \"\";\n        }, 1000);\n      } else if (previousInstance.name === obj.name) {\n        obj.updateStatus({visible: \"visible\", styleName: \"miniCard spin\"});\n        previousInstance = \"\";\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App, App-header\">\n        <div className=\"cardContainer\">\n        {\n          this.state.shuffledArray.map((obj, index) => {\n            return <ClickCard className=\"miniCard\" key={index} name={obj.name} visible={obj.visible} parentClickHandler={this.clickHandler}></ClickCard>\n          })\n        }\n        </div>\n        <div class=\"left\"><span>Moves</span> : <span>{ this.state.count }</span></div>\n        <div><button onClick={this.resetMe}>Reset Me</button></div>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}